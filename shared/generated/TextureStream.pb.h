#include "../mzProtoCommon.h"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TextureStream.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TextureStream_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TextureStream_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Builtins.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TextureStream_2eproto mzProto_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct mzProto_API TableStruct_TextureStream_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
mzProto_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TextureStream_2eproto;
namespace mz {
namespace vk {
namespace stream {
class AcquireImageRequest;
struct AcquireImageRequestDefaultTypeInternal;
mzProto_API extern AcquireImageRequestDefaultTypeInternal _AcquireImageRequest_default_instance_;
class AcquireImageResponse;
struct AcquireImageResponseDefaultTypeInternal;
mzProto_API extern AcquireImageResponseDefaultTypeInternal _AcquireImageResponse_default_instance_;
class TextureStreamRequest;
struct TextureStreamRequestDefaultTypeInternal;
mzProto_API extern TextureStreamRequestDefaultTypeInternal _TextureStreamRequest_default_instance_;
class TextureStreamResponse;
struct TextureStreamResponseDefaultTypeInternal;
mzProto_API extern TextureStreamResponseDefaultTypeInternal _TextureStreamResponse_default_instance_;
}  // namespace stream
}  // namespace vk
}  // namespace mz
PROTOBUF_NAMESPACE_OPEN
template<> mzProto_API ::mz::vk::stream::AcquireImageRequest* Arena::CreateMaybeMessage<::mz::vk::stream::AcquireImageRequest>(Arena*);
template<> mzProto_API ::mz::vk::stream::AcquireImageResponse* Arena::CreateMaybeMessage<::mz::vk::stream::AcquireImageResponse>(Arena*);
template<> mzProto_API ::mz::vk::stream::TextureStreamRequest* Arena::CreateMaybeMessage<::mz::vk::stream::TextureStreamRequest>(Arena*);
template<> mzProto_API ::mz::vk::stream::TextureStreamResponse* Arena::CreateMaybeMessage<::mz::vk::stream::TextureStreamResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mz {
namespace vk {
namespace stream {

enum StreamType : int {
  Input = 0,
  Output = 1,
  StreamType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StreamType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
mzProto_API bool StreamType_IsValid(int value);
constexpr StreamType StreamType_MIN = Input;
constexpr StreamType StreamType_MAX = Output;
constexpr int StreamType_ARRAYSIZE = StreamType_MAX + 1;

mzProto_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamType_descriptor();
template<typename T>
inline const std::string& StreamType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamType_descriptor(), enum_t_value);
}
inline bool StreamType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StreamType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamType>(
    StreamType_descriptor(), name, value);
}
// ===================================================================

class mzProto_API TextureStreamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mz.vk.stream.TextureStreamRequest) */ {
 public:
  inline TextureStreamRequest() : TextureStreamRequest(nullptr) {}
  ~TextureStreamRequest() override;
  explicit constexpr TextureStreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextureStreamRequest(const TextureStreamRequest& from);
  TextureStreamRequest(TextureStreamRequest&& from) noexcept
    : TextureStreamRequest() {
    *this = ::std::move(from);
  }

  inline TextureStreamRequest& operator=(const TextureStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextureStreamRequest& operator=(TextureStreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextureStreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextureStreamRequest* internal_default_instance() {
    return reinterpret_cast<const TextureStreamRequest*>(
               &_TextureStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TextureStreamRequest& a, TextureStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TextureStreamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextureStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextureStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextureStreamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextureStreamRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TextureStreamRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextureStreamRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mz.vk.stream.TextureStreamRequest";
  }
  protected:
  explicit TextureStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kImageFormatFieldNumber = 3,
    kImageUsageFieldNumber = 4,
    kImageCountFieldNumber = 5,
    kStreamTypeFieldNumber = 6,
    kDeviceIdFieldNumber = 7,
  };
  // uint32 width = 1;
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // uint32 height = 2;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // uint32 image_format = 3;
  void clear_image_format();
  uint32_t image_format() const;
  void set_image_format(uint32_t value);
  private:
  uint32_t _internal_image_format() const;
  void _internal_set_image_format(uint32_t value);
  public:

  // uint32 image_usage = 4;
  void clear_image_usage();
  uint32_t image_usage() const;
  void set_image_usage(uint32_t value);
  private:
  uint32_t _internal_image_usage() const;
  void _internal_set_image_usage(uint32_t value);
  public:

  // uint32 image_count = 5;
  void clear_image_count();
  uint32_t image_count() const;
  void set_image_count(uint32_t value);
  private:
  uint32_t _internal_image_count() const;
  void _internal_set_image_count(uint32_t value);
  public:

  // .mz.vk.stream.StreamType stream_type = 6;
  void clear_stream_type();
  ::mz::vk::stream::StreamType stream_type() const;
  void set_stream_type(::mz::vk::stream::StreamType value);
  private:
  ::mz::vk::stream::StreamType _internal_stream_type() const;
  void _internal_set_stream_type(::mz::vk::stream::StreamType value);
  public:

  // uint64 device_id = 7;
  void clear_device_id();
  uint64_t device_id() const;
  void set_device_id(uint64_t value);
  private:
  uint64_t _internal_device_id() const;
  void _internal_set_device_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:mz.vk.stream.TextureStreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t width_;
  uint32_t height_;
  uint32_t image_format_;
  uint32_t image_usage_;
  uint32_t image_count_;
  int stream_type_;
  uint64_t device_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TextureStream_2eproto;
};
// -------------------------------------------------------------------

class mzProto_API TextureStreamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mz.vk.stream.TextureStreamResponse) */ {
 public:
  inline TextureStreamResponse() : TextureStreamResponse(nullptr) {}
  ~TextureStreamResponse() override;
  explicit constexpr TextureStreamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextureStreamResponse(const TextureStreamResponse& from);
  TextureStreamResponse(TextureStreamResponse&& from) noexcept
    : TextureStreamResponse() {
    *this = ::std::move(from);
  }

  inline TextureStreamResponse& operator=(const TextureStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextureStreamResponse& operator=(TextureStreamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextureStreamResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextureStreamResponse* internal_default_instance() {
    return reinterpret_cast<const TextureStreamResponse*>(
               &_TextureStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TextureStreamResponse& a, TextureStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TextureStreamResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextureStreamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextureStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextureStreamResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextureStreamResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TextureStreamResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextureStreamResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mz.vk.stream.TextureStreamResponse";
  }
  protected:
  explicit TextureStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTexturesFieldNumber = 2,
    kStreamHandleFieldNumber = 1,
  };
  // repeated .mz.proto.Texture textures = 2;
  int textures_size() const;
  private:
  int _internal_textures_size() const;
  public:
  void clear_textures();
  ::mz::proto::Texture* mutable_textures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mz::proto::Texture >*
      mutable_textures();
  private:
  const ::mz::proto::Texture& _internal_textures(int index) const;
  ::mz::proto::Texture* _internal_add_textures();
  public:
  const ::mz::proto::Texture& textures(int index) const;
  ::mz::proto::Texture* add_textures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mz::proto::Texture >&
      textures() const;

  // uint64 stream_handle = 1;
  void clear_stream_handle();
  uint64_t stream_handle() const;
  void set_stream_handle(uint64_t value);
  private:
  uint64_t _internal_stream_handle() const;
  void _internal_set_stream_handle(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:mz.vk.stream.TextureStreamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mz::proto::Texture > textures_;
  uint64_t stream_handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TextureStream_2eproto;
};
// -------------------------------------------------------------------

class mzProto_API AcquireImageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mz.vk.stream.AcquireImageRequest) */ {
 public:
  inline AcquireImageRequest() : AcquireImageRequest(nullptr) {}
  ~AcquireImageRequest() override;
  explicit constexpr AcquireImageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AcquireImageRequest(const AcquireImageRequest& from);
  AcquireImageRequest(AcquireImageRequest&& from) noexcept
    : AcquireImageRequest() {
    *this = ::std::move(from);
  }

  inline AcquireImageRequest& operator=(const AcquireImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcquireImageRequest& operator=(AcquireImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcquireImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcquireImageRequest* internal_default_instance() {
    return reinterpret_cast<const AcquireImageRequest*>(
               &_AcquireImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AcquireImageRequest& a, AcquireImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AcquireImageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcquireImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AcquireImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AcquireImageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AcquireImageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AcquireImageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcquireImageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mz.vk.stream.AcquireImageRequest";
  }
  protected:
  explicit AcquireImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamHandleFieldNumber = 1,
  };
  // uint64 stream_handle = 1;
  void clear_stream_handle();
  uint64_t stream_handle() const;
  void set_stream_handle(uint64_t value);
  private:
  uint64_t _internal_stream_handle() const;
  void _internal_set_stream_handle(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:mz.vk.stream.AcquireImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t stream_handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TextureStream_2eproto;
};
// -------------------------------------------------------------------

class mzProto_API AcquireImageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mz.vk.stream.AcquireImageResponse) */ {
 public:
  inline AcquireImageResponse() : AcquireImageResponse(nullptr) {}
  ~AcquireImageResponse() override;
  explicit constexpr AcquireImageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AcquireImageResponse(const AcquireImageResponse& from);
  AcquireImageResponse(AcquireImageResponse&& from) noexcept
    : AcquireImageResponse() {
    *this = ::std::move(from);
  }

  inline AcquireImageResponse& operator=(const AcquireImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcquireImageResponse& operator=(AcquireImageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcquireImageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcquireImageResponse* internal_default_instance() {
    return reinterpret_cast<const AcquireImageResponse*>(
               &_AcquireImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AcquireImageResponse& a, AcquireImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AcquireImageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcquireImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AcquireImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AcquireImageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AcquireImageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AcquireImageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcquireImageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mz.vk.stream.AcquireImageResponse";
  }
  protected:
  explicit AcquireImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextureIndexFieldNumber = 1,
  };
  // uint32 texture_index = 1;
  void clear_texture_index();
  uint32_t texture_index() const;
  void set_texture_index(uint32_t value);
  private:
  uint32_t _internal_texture_index() const;
  void _internal_set_texture_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mz.vk.stream.AcquireImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t texture_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TextureStream_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TextureStreamRequest

// uint32 width = 1;
inline void TextureStreamRequest::clear_width() {
  width_ = 0u;
}
inline uint32_t TextureStreamRequest::_internal_width() const {
  return width_;
}
inline uint32_t TextureStreamRequest::width() const {
  // @@protoc_insertion_point(field_get:mz.vk.stream.TextureStreamRequest.width)
  return _internal_width();
}
inline void TextureStreamRequest::_internal_set_width(uint32_t value) {
  
  width_ = value;
}
inline void TextureStreamRequest::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:mz.vk.stream.TextureStreamRequest.width)
}

// uint32 height = 2;
inline void TextureStreamRequest::clear_height() {
  height_ = 0u;
}
inline uint32_t TextureStreamRequest::_internal_height() const {
  return height_;
}
inline uint32_t TextureStreamRequest::height() const {
  // @@protoc_insertion_point(field_get:mz.vk.stream.TextureStreamRequest.height)
  return _internal_height();
}
inline void TextureStreamRequest::_internal_set_height(uint32_t value) {
  
  height_ = value;
}
inline void TextureStreamRequest::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:mz.vk.stream.TextureStreamRequest.height)
}

// uint32 image_format = 3;
inline void TextureStreamRequest::clear_image_format() {
  image_format_ = 0u;
}
inline uint32_t TextureStreamRequest::_internal_image_format() const {
  return image_format_;
}
inline uint32_t TextureStreamRequest::image_format() const {
  // @@protoc_insertion_point(field_get:mz.vk.stream.TextureStreamRequest.image_format)
  return _internal_image_format();
}
inline void TextureStreamRequest::_internal_set_image_format(uint32_t value) {
  
  image_format_ = value;
}
inline void TextureStreamRequest::set_image_format(uint32_t value) {
  _internal_set_image_format(value);
  // @@protoc_insertion_point(field_set:mz.vk.stream.TextureStreamRequest.image_format)
}

// uint32 image_usage = 4;
inline void TextureStreamRequest::clear_image_usage() {
  image_usage_ = 0u;
}
inline uint32_t TextureStreamRequest::_internal_image_usage() const {
  return image_usage_;
}
inline uint32_t TextureStreamRequest::image_usage() const {
  // @@protoc_insertion_point(field_get:mz.vk.stream.TextureStreamRequest.image_usage)
  return _internal_image_usage();
}
inline void TextureStreamRequest::_internal_set_image_usage(uint32_t value) {
  
  image_usage_ = value;
}
inline void TextureStreamRequest::set_image_usage(uint32_t value) {
  _internal_set_image_usage(value);
  // @@protoc_insertion_point(field_set:mz.vk.stream.TextureStreamRequest.image_usage)
}

// uint32 image_count = 5;
inline void TextureStreamRequest::clear_image_count() {
  image_count_ = 0u;
}
inline uint32_t TextureStreamRequest::_internal_image_count() const {
  return image_count_;
}
inline uint32_t TextureStreamRequest::image_count() const {
  // @@protoc_insertion_point(field_get:mz.vk.stream.TextureStreamRequest.image_count)
  return _internal_image_count();
}
inline void TextureStreamRequest::_internal_set_image_count(uint32_t value) {
  
  image_count_ = value;
}
inline void TextureStreamRequest::set_image_count(uint32_t value) {
  _internal_set_image_count(value);
  // @@protoc_insertion_point(field_set:mz.vk.stream.TextureStreamRequest.image_count)
}

// .mz.vk.stream.StreamType stream_type = 6;
inline void TextureStreamRequest::clear_stream_type() {
  stream_type_ = 0;
}
inline ::mz::vk::stream::StreamType TextureStreamRequest::_internal_stream_type() const {
  return static_cast< ::mz::vk::stream::StreamType >(stream_type_);
}
inline ::mz::vk::stream::StreamType TextureStreamRequest::stream_type() const {
  // @@protoc_insertion_point(field_get:mz.vk.stream.TextureStreamRequest.stream_type)
  return _internal_stream_type();
}
inline void TextureStreamRequest::_internal_set_stream_type(::mz::vk::stream::StreamType value) {
  
  stream_type_ = value;
}
inline void TextureStreamRequest::set_stream_type(::mz::vk::stream::StreamType value) {
  _internal_set_stream_type(value);
  // @@protoc_insertion_point(field_set:mz.vk.stream.TextureStreamRequest.stream_type)
}

// uint64 device_id = 7;
inline void TextureStreamRequest::clear_device_id() {
  device_id_ = uint64_t{0u};
}
inline uint64_t TextureStreamRequest::_internal_device_id() const {
  return device_id_;
}
inline uint64_t TextureStreamRequest::device_id() const {
  // @@protoc_insertion_point(field_get:mz.vk.stream.TextureStreamRequest.device_id)
  return _internal_device_id();
}
inline void TextureStreamRequest::_internal_set_device_id(uint64_t value) {
  
  device_id_ = value;
}
inline void TextureStreamRequest::set_device_id(uint64_t value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:mz.vk.stream.TextureStreamRequest.device_id)
}

// -------------------------------------------------------------------

// TextureStreamResponse

// uint64 stream_handle = 1;
inline void TextureStreamResponse::clear_stream_handle() {
  stream_handle_ = uint64_t{0u};
}
inline uint64_t TextureStreamResponse::_internal_stream_handle() const {
  return stream_handle_;
}
inline uint64_t TextureStreamResponse::stream_handle() const {
  // @@protoc_insertion_point(field_get:mz.vk.stream.TextureStreamResponse.stream_handle)
  return _internal_stream_handle();
}
inline void TextureStreamResponse::_internal_set_stream_handle(uint64_t value) {
  
  stream_handle_ = value;
}
inline void TextureStreamResponse::set_stream_handle(uint64_t value) {
  _internal_set_stream_handle(value);
  // @@protoc_insertion_point(field_set:mz.vk.stream.TextureStreamResponse.stream_handle)
}

// repeated .mz.proto.Texture textures = 2;
inline int TextureStreamResponse::_internal_textures_size() const {
  return textures_.size();
}
inline int TextureStreamResponse::textures_size() const {
  return _internal_textures_size();
}
inline ::mz::proto::Texture* TextureStreamResponse::mutable_textures(int index) {
  // @@protoc_insertion_point(field_mutable:mz.vk.stream.TextureStreamResponse.textures)
  return textures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mz::proto::Texture >*
TextureStreamResponse::mutable_textures() {
  // @@protoc_insertion_point(field_mutable_list:mz.vk.stream.TextureStreamResponse.textures)
  return &textures_;
}
inline const ::mz::proto::Texture& TextureStreamResponse::_internal_textures(int index) const {
  return textures_.Get(index);
}
inline const ::mz::proto::Texture& TextureStreamResponse::textures(int index) const {
  // @@protoc_insertion_point(field_get:mz.vk.stream.TextureStreamResponse.textures)
  return _internal_textures(index);
}
inline ::mz::proto::Texture* TextureStreamResponse::_internal_add_textures() {
  return textures_.Add();
}
inline ::mz::proto::Texture* TextureStreamResponse::add_textures() {
  ::mz::proto::Texture* _add = _internal_add_textures();
  // @@protoc_insertion_point(field_add:mz.vk.stream.TextureStreamResponse.textures)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mz::proto::Texture >&
TextureStreamResponse::textures() const {
  // @@protoc_insertion_point(field_list:mz.vk.stream.TextureStreamResponse.textures)
  return textures_;
}

// -------------------------------------------------------------------

// AcquireImageRequest

// uint64 stream_handle = 1;
inline void AcquireImageRequest::clear_stream_handle() {
  stream_handle_ = uint64_t{0u};
}
inline uint64_t AcquireImageRequest::_internal_stream_handle() const {
  return stream_handle_;
}
inline uint64_t AcquireImageRequest::stream_handle() const {
  // @@protoc_insertion_point(field_get:mz.vk.stream.AcquireImageRequest.stream_handle)
  return _internal_stream_handle();
}
inline void AcquireImageRequest::_internal_set_stream_handle(uint64_t value) {
  
  stream_handle_ = value;
}
inline void AcquireImageRequest::set_stream_handle(uint64_t value) {
  _internal_set_stream_handle(value);
  // @@protoc_insertion_point(field_set:mz.vk.stream.AcquireImageRequest.stream_handle)
}

// -------------------------------------------------------------------

// AcquireImageResponse

// uint32 texture_index = 1;
inline void AcquireImageResponse::clear_texture_index() {
  texture_index_ = 0u;
}
inline uint32_t AcquireImageResponse::_internal_texture_index() const {
  return texture_index_;
}
inline uint32_t AcquireImageResponse::texture_index() const {
  // @@protoc_insertion_point(field_get:mz.vk.stream.AcquireImageResponse.texture_index)
  return _internal_texture_index();
}
inline void AcquireImageResponse::_internal_set_texture_index(uint32_t value) {
  
  texture_index_ = value;
}
inline void AcquireImageResponse::set_texture_index(uint32_t value) {
  _internal_set_texture_index(value);
  // @@protoc_insertion_point(field_set:mz.vk.stream.AcquireImageResponse.texture_index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stream
}  // namespace vk
}  // namespace mz

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mz::vk::stream::StreamType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mz::vk::stream::StreamType>() {
  return ::mz::vk::stream::StreamType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TextureStream_2eproto
