#include "../mzProtoCommon.h"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Builtins.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Builtins_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Builtins_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Builtins_2eproto mzProto_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct mzProto_API TableStruct_Builtins_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
mzProto_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Builtins_2eproto;
namespace mz {
namespace proto {
class Texture;
struct TextureDefaultTypeInternal;
mzProto_API extern TextureDefaultTypeInternal _Texture_default_instance_;
class Void;
struct VoidDefaultTypeInternal;
mzProto_API extern VoidDefaultTypeInternal _Void_default_instance_;
class mat2;
struct mat2DefaultTypeInternal;
mzProto_API extern mat2DefaultTypeInternal _mat2_default_instance_;
class mat3;
struct mat3DefaultTypeInternal;
mzProto_API extern mat3DefaultTypeInternal _mat3_default_instance_;
class mat4;
struct mat4DefaultTypeInternal;
mzProto_API extern mat4DefaultTypeInternal _mat4_default_instance_;
class vec2;
struct vec2DefaultTypeInternal;
mzProto_API extern vec2DefaultTypeInternal _vec2_default_instance_;
class vec2i;
struct vec2iDefaultTypeInternal;
mzProto_API extern vec2iDefaultTypeInternal _vec2i_default_instance_;
class vec3;
struct vec3DefaultTypeInternal;
mzProto_API extern vec3DefaultTypeInternal _vec3_default_instance_;
class vec4;
struct vec4DefaultTypeInternal;
mzProto_API extern vec4DefaultTypeInternal _vec4_default_instance_;
}  // namespace proto
}  // namespace mz
PROTOBUF_NAMESPACE_OPEN
template<> mzProto_API ::mz::proto::Texture* Arena::CreateMaybeMessage<::mz::proto::Texture>(Arena*);
template<> mzProto_API ::mz::proto::Void* Arena::CreateMaybeMessage<::mz::proto::Void>(Arena*);
template<> mzProto_API ::mz::proto::mat2* Arena::CreateMaybeMessage<::mz::proto::mat2>(Arena*);
template<> mzProto_API ::mz::proto::mat3* Arena::CreateMaybeMessage<::mz::proto::mat3>(Arena*);
template<> mzProto_API ::mz::proto::mat4* Arena::CreateMaybeMessage<::mz::proto::mat4>(Arena*);
template<> mzProto_API ::mz::proto::vec2* Arena::CreateMaybeMessage<::mz::proto::vec2>(Arena*);
template<> mzProto_API ::mz::proto::vec2i* Arena::CreateMaybeMessage<::mz::proto::vec2i>(Arena*);
template<> mzProto_API ::mz::proto::vec3* Arena::CreateMaybeMessage<::mz::proto::vec3>(Arena*);
template<> mzProto_API ::mz::proto::vec4* Arena::CreateMaybeMessage<::mz::proto::vec4>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mz {
namespace proto {

// ===================================================================

class mzProto_API Texture final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mz.proto.Texture) */ {
 public:
  inline Texture() : Texture(nullptr) {}
  ~Texture() override;
  explicit constexpr Texture(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Texture(const Texture& from);
  Texture(Texture&& from) noexcept
    : Texture() {
    *this = ::std::move(from);
  }

  inline Texture& operator=(const Texture& from) {
    CopyFrom(from);
    return *this;
  }
  inline Texture& operator=(Texture&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Texture& default_instance() {
    return *internal_default_instance();
  }
  static inline const Texture* internal_default_instance() {
    return reinterpret_cast<const Texture*>(
               &_Texture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Texture& a, Texture& b) {
    a.Swap(&b);
  }
  inline void Swap(Texture* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Texture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Texture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Texture>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Texture& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Texture& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Texture* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mz.proto.Texture";
  }
  protected:
  explicit Texture(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kFormatFieldNumber = 3,
    kUsageFieldNumber = 4,
    kPIDFieldNumber = 5,
    kMemoryFieldNumber = 6,
    kSyncFieldNumber = 7,
    kOffsetFieldNumber = 8,
  };
  // uint32 Width = 1;
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // uint32 Height = 2;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // uint32 Format = 3;
  void clear_format();
  uint32_t format() const;
  void set_format(uint32_t value);
  private:
  uint32_t _internal_format() const;
  void _internal_set_format(uint32_t value);
  public:

  // uint32 Usage = 4;
  void clear_usage();
  uint32_t usage() const;
  void set_usage(uint32_t value);
  private:
  uint32_t _internal_usage() const;
  void _internal_set_usage(uint32_t value);
  public:

  // uint64 PID = 5;
  void clear_pid();
  uint64_t pid() const;
  void set_pid(uint64_t value);
  private:
  uint64_t _internal_pid() const;
  void _internal_set_pid(uint64_t value);
  public:

  // uint64 Memory = 6;
  void clear_memory();
  uint64_t memory() const;
  void set_memory(uint64_t value);
  private:
  uint64_t _internal_memory() const;
  void _internal_set_memory(uint64_t value);
  public:

  // uint64 Sync = 7;
  void clear_sync();
  uint64_t sync() const;
  void set_sync(uint64_t value);
  private:
  uint64_t _internal_sync() const;
  void _internal_set_sync(uint64_t value);
  public:

  // uint64 Offset = 8;
  void clear_offset();
  uint64_t offset() const;
  void set_offset(uint64_t value);
  private:
  uint64_t _internal_offset() const;
  void _internal_set_offset(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:mz.proto.Texture)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t width_;
  uint32_t height_;
  uint32_t format_;
  uint32_t usage_;
  uint64_t pid_;
  uint64_t memory_;
  uint64_t sync_;
  uint64_t offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Builtins_2eproto;
};
// -------------------------------------------------------------------

class mzProto_API Void final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mz.proto.Void) */ {
 public:
  inline Void() : Void(nullptr) {}
  explicit constexpr Void(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Void(const Void& from);
  Void(Void&& from) noexcept
    : Void() {
    *this = ::std::move(from);
  }

  inline Void& operator=(const Void& from) {
    CopyFrom(from);
    return *this;
  }
  inline Void& operator=(Void&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Void& default_instance() {
    return *internal_default_instance();
  }
  static inline const Void* internal_default_instance() {
    return reinterpret_cast<const Void*>(
               &_Void_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Void& a, Void& b) {
    a.Swap(&b);
  }
  inline void Swap(Void* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Void* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Void* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Void>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Void& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Void& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mz.proto.Void";
  }
  protected:
  explicit Void(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mz.proto.Void)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Builtins_2eproto;
};
// -------------------------------------------------------------------

class mzProto_API vec2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mz.proto.vec2) */ {
 public:
  inline vec2() : vec2(nullptr) {}
  ~vec2() override;
  explicit constexpr vec2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  vec2(const vec2& from);
  vec2(vec2&& from) noexcept
    : vec2() {
    *this = ::std::move(from);
  }

  inline vec2& operator=(const vec2& from) {
    CopyFrom(from);
    return *this;
  }
  inline vec2& operator=(vec2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const vec2& default_instance() {
    return *internal_default_instance();
  }
  static inline const vec2* internal_default_instance() {
    return reinterpret_cast<const vec2*>(
               &_vec2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(vec2& a, vec2& b) {
    a.Swap(&b);
  }
  inline void Swap(vec2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(vec2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  vec2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<vec2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const vec2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const vec2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(vec2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mz.proto.vec2";
  }
  protected:
  explicit vec2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:mz.proto.vec2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Builtins_2eproto;
};
// -------------------------------------------------------------------

class mzProto_API vec2i final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mz.proto.vec2i) */ {
 public:
  inline vec2i() : vec2i(nullptr) {}
  ~vec2i() override;
  explicit constexpr vec2i(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  vec2i(const vec2i& from);
  vec2i(vec2i&& from) noexcept
    : vec2i() {
    *this = ::std::move(from);
  }

  inline vec2i& operator=(const vec2i& from) {
    CopyFrom(from);
    return *this;
  }
  inline vec2i& operator=(vec2i&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const vec2i& default_instance() {
    return *internal_default_instance();
  }
  static inline const vec2i* internal_default_instance() {
    return reinterpret_cast<const vec2i*>(
               &_vec2i_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(vec2i& a, vec2i& b) {
    a.Swap(&b);
  }
  inline void Swap(vec2i* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(vec2i* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  vec2i* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<vec2i>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const vec2i& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const vec2i& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(vec2i* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mz.proto.vec2i";
  }
  protected:
  explicit vec2i(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mz.proto.vec2i)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t x_;
  int32_t y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Builtins_2eproto;
};
// -------------------------------------------------------------------

class mzProto_API vec3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mz.proto.vec3) */ {
 public:
  inline vec3() : vec3(nullptr) {}
  ~vec3() override;
  explicit constexpr vec3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  vec3(const vec3& from);
  vec3(vec3&& from) noexcept
    : vec3() {
    *this = ::std::move(from);
  }

  inline vec3& operator=(const vec3& from) {
    CopyFrom(from);
    return *this;
  }
  inline vec3& operator=(vec3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const vec3& default_instance() {
    return *internal_default_instance();
  }
  static inline const vec3* internal_default_instance() {
    return reinterpret_cast<const vec3*>(
               &_vec3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(vec3& a, vec3& b) {
    a.Swap(&b);
  }
  inline void Swap(vec3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(vec3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  vec3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<vec3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const vec3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const vec3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(vec3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mz.proto.vec3";
  }
  protected:
  explicit vec3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:mz.proto.vec3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Builtins_2eproto;
};
// -------------------------------------------------------------------

class mzProto_API vec4 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mz.proto.vec4) */ {
 public:
  inline vec4() : vec4(nullptr) {}
  ~vec4() override;
  explicit constexpr vec4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  vec4(const vec4& from);
  vec4(vec4&& from) noexcept
    : vec4() {
    *this = ::std::move(from);
  }

  inline vec4& operator=(const vec4& from) {
    CopyFrom(from);
    return *this;
  }
  inline vec4& operator=(vec4&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const vec4& default_instance() {
    return *internal_default_instance();
  }
  static inline const vec4* internal_default_instance() {
    return reinterpret_cast<const vec4*>(
               &_vec4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(vec4& a, vec4& b) {
    a.Swap(&b);
  }
  inline void Swap(vec4* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(vec4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  vec4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<vec4>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const vec4& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const vec4& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(vec4* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mz.proto.vec4";
  }
  protected:
  explicit vec4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float w = 4;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:mz.proto.vec4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  float w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Builtins_2eproto;
};
// -------------------------------------------------------------------

class mzProto_API mat2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mz.proto.mat2) */ {
 public:
  inline mat2() : mat2(nullptr) {}
  ~mat2() override;
  explicit constexpr mat2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mat2(const mat2& from);
  mat2(mat2&& from) noexcept
    : mat2() {
    *this = ::std::move(from);
  }

  inline mat2& operator=(const mat2& from) {
    CopyFrom(from);
    return *this;
  }
  inline mat2& operator=(mat2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mat2& default_instance() {
    return *internal_default_instance();
  }
  static inline const mat2* internal_default_instance() {
    return reinterpret_cast<const mat2*>(
               &_mat2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(mat2& a, mat2& b) {
    a.Swap(&b);
  }
  inline void Swap(mat2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mat2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  mat2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<mat2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mat2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const mat2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mat2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mz.proto.mat2";
  }
  protected:
  explicit mat2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // .mz.proto.vec2 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  const ::mz::proto::vec2& x() const;
  PROTOBUF_NODISCARD ::mz::proto::vec2* release_x();
  ::mz::proto::vec2* mutable_x();
  void set_allocated_x(::mz::proto::vec2* x);
  private:
  const ::mz::proto::vec2& _internal_x() const;
  ::mz::proto::vec2* _internal_mutable_x();
  public:
  void unsafe_arena_set_allocated_x(
      ::mz::proto::vec2* x);
  ::mz::proto::vec2* unsafe_arena_release_x();

  // .mz.proto.vec2 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  const ::mz::proto::vec2& y() const;
  PROTOBUF_NODISCARD ::mz::proto::vec2* release_y();
  ::mz::proto::vec2* mutable_y();
  void set_allocated_y(::mz::proto::vec2* y);
  private:
  const ::mz::proto::vec2& _internal_y() const;
  ::mz::proto::vec2* _internal_mutable_y();
  public:
  void unsafe_arena_set_allocated_y(
      ::mz::proto::vec2* y);
  ::mz::proto::vec2* unsafe_arena_release_y();

  // @@protoc_insertion_point(class_scope:mz.proto.mat2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mz::proto::vec2* x_;
  ::mz::proto::vec2* y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Builtins_2eproto;
};
// -------------------------------------------------------------------

class mzProto_API mat3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mz.proto.mat3) */ {
 public:
  inline mat3() : mat3(nullptr) {}
  ~mat3() override;
  explicit constexpr mat3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mat3(const mat3& from);
  mat3(mat3&& from) noexcept
    : mat3() {
    *this = ::std::move(from);
  }

  inline mat3& operator=(const mat3& from) {
    CopyFrom(from);
    return *this;
  }
  inline mat3& operator=(mat3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mat3& default_instance() {
    return *internal_default_instance();
  }
  static inline const mat3* internal_default_instance() {
    return reinterpret_cast<const mat3*>(
               &_mat3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(mat3& a, mat3& b) {
    a.Swap(&b);
  }
  inline void Swap(mat3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mat3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  mat3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<mat3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mat3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const mat3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mat3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mz.proto.mat3";
  }
  protected:
  explicit mat3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // .mz.proto.vec3 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  const ::mz::proto::vec3& x() const;
  PROTOBUF_NODISCARD ::mz::proto::vec3* release_x();
  ::mz::proto::vec3* mutable_x();
  void set_allocated_x(::mz::proto::vec3* x);
  private:
  const ::mz::proto::vec3& _internal_x() const;
  ::mz::proto::vec3* _internal_mutable_x();
  public:
  void unsafe_arena_set_allocated_x(
      ::mz::proto::vec3* x);
  ::mz::proto::vec3* unsafe_arena_release_x();

  // .mz.proto.vec3 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  const ::mz::proto::vec3& y() const;
  PROTOBUF_NODISCARD ::mz::proto::vec3* release_y();
  ::mz::proto::vec3* mutable_y();
  void set_allocated_y(::mz::proto::vec3* y);
  private:
  const ::mz::proto::vec3& _internal_y() const;
  ::mz::proto::vec3* _internal_mutable_y();
  public:
  void unsafe_arena_set_allocated_y(
      ::mz::proto::vec3* y);
  ::mz::proto::vec3* unsafe_arena_release_y();

  // .mz.proto.vec3 z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  const ::mz::proto::vec3& z() const;
  PROTOBUF_NODISCARD ::mz::proto::vec3* release_z();
  ::mz::proto::vec3* mutable_z();
  void set_allocated_z(::mz::proto::vec3* z);
  private:
  const ::mz::proto::vec3& _internal_z() const;
  ::mz::proto::vec3* _internal_mutable_z();
  public:
  void unsafe_arena_set_allocated_z(
      ::mz::proto::vec3* z);
  ::mz::proto::vec3* unsafe_arena_release_z();

  // @@protoc_insertion_point(class_scope:mz.proto.mat3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mz::proto::vec3* x_;
  ::mz::proto::vec3* y_;
  ::mz::proto::vec3* z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Builtins_2eproto;
};
// -------------------------------------------------------------------

class mzProto_API mat4 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mz.proto.mat4) */ {
 public:
  inline mat4() : mat4(nullptr) {}
  ~mat4() override;
  explicit constexpr mat4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mat4(const mat4& from);
  mat4(mat4&& from) noexcept
    : mat4() {
    *this = ::std::move(from);
  }

  inline mat4& operator=(const mat4& from) {
    CopyFrom(from);
    return *this;
  }
  inline mat4& operator=(mat4&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mat4& default_instance() {
    return *internal_default_instance();
  }
  static inline const mat4* internal_default_instance() {
    return reinterpret_cast<const mat4*>(
               &_mat4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(mat4& a, mat4& b) {
    a.Swap(&b);
  }
  inline void Swap(mat4* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mat4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  mat4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<mat4>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mat4& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const mat4& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mat4* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mz.proto.mat4";
  }
  protected:
  explicit mat4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // .mz.proto.vec4 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  const ::mz::proto::vec4& x() const;
  PROTOBUF_NODISCARD ::mz::proto::vec4* release_x();
  ::mz::proto::vec4* mutable_x();
  void set_allocated_x(::mz::proto::vec4* x);
  private:
  const ::mz::proto::vec4& _internal_x() const;
  ::mz::proto::vec4* _internal_mutable_x();
  public:
  void unsafe_arena_set_allocated_x(
      ::mz::proto::vec4* x);
  ::mz::proto::vec4* unsafe_arena_release_x();

  // .mz.proto.vec4 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  const ::mz::proto::vec4& y() const;
  PROTOBUF_NODISCARD ::mz::proto::vec4* release_y();
  ::mz::proto::vec4* mutable_y();
  void set_allocated_y(::mz::proto::vec4* y);
  private:
  const ::mz::proto::vec4& _internal_y() const;
  ::mz::proto::vec4* _internal_mutable_y();
  public:
  void unsafe_arena_set_allocated_y(
      ::mz::proto::vec4* y);
  ::mz::proto::vec4* unsafe_arena_release_y();

  // .mz.proto.vec4 z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  const ::mz::proto::vec4& z() const;
  PROTOBUF_NODISCARD ::mz::proto::vec4* release_z();
  ::mz::proto::vec4* mutable_z();
  void set_allocated_z(::mz::proto::vec4* z);
  private:
  const ::mz::proto::vec4& _internal_z() const;
  ::mz::proto::vec4* _internal_mutable_z();
  public:
  void unsafe_arena_set_allocated_z(
      ::mz::proto::vec4* z);
  ::mz::proto::vec4* unsafe_arena_release_z();

  // .mz.proto.vec4 w = 4;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  const ::mz::proto::vec4& w() const;
  PROTOBUF_NODISCARD ::mz::proto::vec4* release_w();
  ::mz::proto::vec4* mutable_w();
  void set_allocated_w(::mz::proto::vec4* w);
  private:
  const ::mz::proto::vec4& _internal_w() const;
  ::mz::proto::vec4* _internal_mutable_w();
  public:
  void unsafe_arena_set_allocated_w(
      ::mz::proto::vec4* w);
  ::mz::proto::vec4* unsafe_arena_release_w();

  // @@protoc_insertion_point(class_scope:mz.proto.mat4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mz::proto::vec4* x_;
  ::mz::proto::vec4* y_;
  ::mz::proto::vec4* z_;
  ::mz::proto::vec4* w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Builtins_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Texture

// uint32 Width = 1;
inline void Texture::clear_width() {
  width_ = 0u;
}
inline uint32_t Texture::_internal_width() const {
  return width_;
}
inline uint32_t Texture::width() const {
  // @@protoc_insertion_point(field_get:mz.proto.Texture.Width)
  return _internal_width();
}
inline void Texture::_internal_set_width(uint32_t value) {
  
  width_ = value;
}
inline void Texture::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:mz.proto.Texture.Width)
}

// uint32 Height = 2;
inline void Texture::clear_height() {
  height_ = 0u;
}
inline uint32_t Texture::_internal_height() const {
  return height_;
}
inline uint32_t Texture::height() const {
  // @@protoc_insertion_point(field_get:mz.proto.Texture.Height)
  return _internal_height();
}
inline void Texture::_internal_set_height(uint32_t value) {
  
  height_ = value;
}
inline void Texture::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:mz.proto.Texture.Height)
}

// uint32 Format = 3;
inline void Texture::clear_format() {
  format_ = 0u;
}
inline uint32_t Texture::_internal_format() const {
  return format_;
}
inline uint32_t Texture::format() const {
  // @@protoc_insertion_point(field_get:mz.proto.Texture.Format)
  return _internal_format();
}
inline void Texture::_internal_set_format(uint32_t value) {
  
  format_ = value;
}
inline void Texture::set_format(uint32_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:mz.proto.Texture.Format)
}

// uint32 Usage = 4;
inline void Texture::clear_usage() {
  usage_ = 0u;
}
inline uint32_t Texture::_internal_usage() const {
  return usage_;
}
inline uint32_t Texture::usage() const {
  // @@protoc_insertion_point(field_get:mz.proto.Texture.Usage)
  return _internal_usage();
}
inline void Texture::_internal_set_usage(uint32_t value) {
  
  usage_ = value;
}
inline void Texture::set_usage(uint32_t value) {
  _internal_set_usage(value);
  // @@protoc_insertion_point(field_set:mz.proto.Texture.Usage)
}

// uint64 PID = 5;
inline void Texture::clear_pid() {
  pid_ = uint64_t{0u};
}
inline uint64_t Texture::_internal_pid() const {
  return pid_;
}
inline uint64_t Texture::pid() const {
  // @@protoc_insertion_point(field_get:mz.proto.Texture.PID)
  return _internal_pid();
}
inline void Texture::_internal_set_pid(uint64_t value) {
  
  pid_ = value;
}
inline void Texture::set_pid(uint64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:mz.proto.Texture.PID)
}

// uint64 Memory = 6;
inline void Texture::clear_memory() {
  memory_ = uint64_t{0u};
}
inline uint64_t Texture::_internal_memory() const {
  return memory_;
}
inline uint64_t Texture::memory() const {
  // @@protoc_insertion_point(field_get:mz.proto.Texture.Memory)
  return _internal_memory();
}
inline void Texture::_internal_set_memory(uint64_t value) {
  
  memory_ = value;
}
inline void Texture::set_memory(uint64_t value) {
  _internal_set_memory(value);
  // @@protoc_insertion_point(field_set:mz.proto.Texture.Memory)
}

// uint64 Sync = 7;
inline void Texture::clear_sync() {
  sync_ = uint64_t{0u};
}
inline uint64_t Texture::_internal_sync() const {
  return sync_;
}
inline uint64_t Texture::sync() const {
  // @@protoc_insertion_point(field_get:mz.proto.Texture.Sync)
  return _internal_sync();
}
inline void Texture::_internal_set_sync(uint64_t value) {
  
  sync_ = value;
}
inline void Texture::set_sync(uint64_t value) {
  _internal_set_sync(value);
  // @@protoc_insertion_point(field_set:mz.proto.Texture.Sync)
}

// uint64 Offset = 8;
inline void Texture::clear_offset() {
  offset_ = uint64_t{0u};
}
inline uint64_t Texture::_internal_offset() const {
  return offset_;
}
inline uint64_t Texture::offset() const {
  // @@protoc_insertion_point(field_get:mz.proto.Texture.Offset)
  return _internal_offset();
}
inline void Texture::_internal_set_offset(uint64_t value) {
  
  offset_ = value;
}
inline void Texture::set_offset(uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:mz.proto.Texture.Offset)
}

// -------------------------------------------------------------------

// Void

// -------------------------------------------------------------------

// vec2

// float x = 1;
inline void vec2::clear_x() {
  x_ = 0;
}
inline float vec2::_internal_x() const {
  return x_;
}
inline float vec2::x() const {
  // @@protoc_insertion_point(field_get:mz.proto.vec2.x)
  return _internal_x();
}
inline void vec2::_internal_set_x(float value) {
  
  x_ = value;
}
inline void vec2::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mz.proto.vec2.x)
}

// float y = 2;
inline void vec2::clear_y() {
  y_ = 0;
}
inline float vec2::_internal_y() const {
  return y_;
}
inline float vec2::y() const {
  // @@protoc_insertion_point(field_get:mz.proto.vec2.y)
  return _internal_y();
}
inline void vec2::_internal_set_y(float value) {
  
  y_ = value;
}
inline void vec2::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mz.proto.vec2.y)
}

// -------------------------------------------------------------------

// vec2i

// int32 x = 1;
inline void vec2i::clear_x() {
  x_ = 0;
}
inline int32_t vec2i::_internal_x() const {
  return x_;
}
inline int32_t vec2i::x() const {
  // @@protoc_insertion_point(field_get:mz.proto.vec2i.x)
  return _internal_x();
}
inline void vec2i::_internal_set_x(int32_t value) {
  
  x_ = value;
}
inline void vec2i::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mz.proto.vec2i.x)
}

// int32 y = 2;
inline void vec2i::clear_y() {
  y_ = 0;
}
inline int32_t vec2i::_internal_y() const {
  return y_;
}
inline int32_t vec2i::y() const {
  // @@protoc_insertion_point(field_get:mz.proto.vec2i.y)
  return _internal_y();
}
inline void vec2i::_internal_set_y(int32_t value) {
  
  y_ = value;
}
inline void vec2i::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mz.proto.vec2i.y)
}

// -------------------------------------------------------------------

// vec3

// float x = 1;
inline void vec3::clear_x() {
  x_ = 0;
}
inline float vec3::_internal_x() const {
  return x_;
}
inline float vec3::x() const {
  // @@protoc_insertion_point(field_get:mz.proto.vec3.x)
  return _internal_x();
}
inline void vec3::_internal_set_x(float value) {
  
  x_ = value;
}
inline void vec3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mz.proto.vec3.x)
}

// float y = 2;
inline void vec3::clear_y() {
  y_ = 0;
}
inline float vec3::_internal_y() const {
  return y_;
}
inline float vec3::y() const {
  // @@protoc_insertion_point(field_get:mz.proto.vec3.y)
  return _internal_y();
}
inline void vec3::_internal_set_y(float value) {
  
  y_ = value;
}
inline void vec3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mz.proto.vec3.y)
}

// float z = 3;
inline void vec3::clear_z() {
  z_ = 0;
}
inline float vec3::_internal_z() const {
  return z_;
}
inline float vec3::z() const {
  // @@protoc_insertion_point(field_get:mz.proto.vec3.z)
  return _internal_z();
}
inline void vec3::_internal_set_z(float value) {
  
  z_ = value;
}
inline void vec3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mz.proto.vec3.z)
}

// -------------------------------------------------------------------

// vec4

// float x = 1;
inline void vec4::clear_x() {
  x_ = 0;
}
inline float vec4::_internal_x() const {
  return x_;
}
inline float vec4::x() const {
  // @@protoc_insertion_point(field_get:mz.proto.vec4.x)
  return _internal_x();
}
inline void vec4::_internal_set_x(float value) {
  
  x_ = value;
}
inline void vec4::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mz.proto.vec4.x)
}

// float y = 2;
inline void vec4::clear_y() {
  y_ = 0;
}
inline float vec4::_internal_y() const {
  return y_;
}
inline float vec4::y() const {
  // @@protoc_insertion_point(field_get:mz.proto.vec4.y)
  return _internal_y();
}
inline void vec4::_internal_set_y(float value) {
  
  y_ = value;
}
inline void vec4::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mz.proto.vec4.y)
}

// float z = 3;
inline void vec4::clear_z() {
  z_ = 0;
}
inline float vec4::_internal_z() const {
  return z_;
}
inline float vec4::z() const {
  // @@protoc_insertion_point(field_get:mz.proto.vec4.z)
  return _internal_z();
}
inline void vec4::_internal_set_z(float value) {
  
  z_ = value;
}
inline void vec4::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mz.proto.vec4.z)
}

// float w = 4;
inline void vec4::clear_w() {
  w_ = 0;
}
inline float vec4::_internal_w() const {
  return w_;
}
inline float vec4::w() const {
  // @@protoc_insertion_point(field_get:mz.proto.vec4.w)
  return _internal_w();
}
inline void vec4::_internal_set_w(float value) {
  
  w_ = value;
}
inline void vec4::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:mz.proto.vec4.w)
}

// -------------------------------------------------------------------

// mat2

// .mz.proto.vec2 x = 1;
inline bool mat2::_internal_has_x() const {
  return this != internal_default_instance() && x_ != nullptr;
}
inline bool mat2::has_x() const {
  return _internal_has_x();
}
inline void mat2::clear_x() {
  if (GetArenaForAllocation() == nullptr && x_ != nullptr) {
    delete x_;
  }
  x_ = nullptr;
}
inline const ::mz::proto::vec2& mat2::_internal_x() const {
  const ::mz::proto::vec2* p = x_;
  return p != nullptr ? *p : reinterpret_cast<const ::mz::proto::vec2&>(
      ::mz::proto::_vec2_default_instance_);
}
inline const ::mz::proto::vec2& mat2::x() const {
  // @@protoc_insertion_point(field_get:mz.proto.mat2.x)
  return _internal_x();
}
inline void mat2::unsafe_arena_set_allocated_x(
    ::mz::proto::vec2* x) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(x_);
  }
  x_ = x;
  if (x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mz.proto.mat2.x)
}
inline ::mz::proto::vec2* mat2::release_x() {
  
  ::mz::proto::vec2* temp = x_;
  x_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mz::proto::vec2* mat2::unsafe_arena_release_x() {
  // @@protoc_insertion_point(field_release:mz.proto.mat2.x)
  
  ::mz::proto::vec2* temp = x_;
  x_ = nullptr;
  return temp;
}
inline ::mz::proto::vec2* mat2::_internal_mutable_x() {
  
  if (x_ == nullptr) {
    auto* p = CreateMaybeMessage<::mz::proto::vec2>(GetArenaForAllocation());
    x_ = p;
  }
  return x_;
}
inline ::mz::proto::vec2* mat2::mutable_x() {
  ::mz::proto::vec2* _msg = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:mz.proto.mat2.x)
  return _msg;
}
inline void mat2::set_allocated_x(::mz::proto::vec2* x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete x_;
  }
  if (x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mz::proto::vec2>::GetOwningArena(x);
    if (message_arena != submessage_arena) {
      x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x, submessage_arena);
    }
    
  } else {
    
  }
  x_ = x;
  // @@protoc_insertion_point(field_set_allocated:mz.proto.mat2.x)
}

// .mz.proto.vec2 y = 2;
inline bool mat2::_internal_has_y() const {
  return this != internal_default_instance() && y_ != nullptr;
}
inline bool mat2::has_y() const {
  return _internal_has_y();
}
inline void mat2::clear_y() {
  if (GetArenaForAllocation() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
}
inline const ::mz::proto::vec2& mat2::_internal_y() const {
  const ::mz::proto::vec2* p = y_;
  return p != nullptr ? *p : reinterpret_cast<const ::mz::proto::vec2&>(
      ::mz::proto::_vec2_default_instance_);
}
inline const ::mz::proto::vec2& mat2::y() const {
  // @@protoc_insertion_point(field_get:mz.proto.mat2.y)
  return _internal_y();
}
inline void mat2::unsafe_arena_set_allocated_y(
    ::mz::proto::vec2* y) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(y_);
  }
  y_ = y;
  if (y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mz.proto.mat2.y)
}
inline ::mz::proto::vec2* mat2::release_y() {
  
  ::mz::proto::vec2* temp = y_;
  y_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mz::proto::vec2* mat2::unsafe_arena_release_y() {
  // @@protoc_insertion_point(field_release:mz.proto.mat2.y)
  
  ::mz::proto::vec2* temp = y_;
  y_ = nullptr;
  return temp;
}
inline ::mz::proto::vec2* mat2::_internal_mutable_y() {
  
  if (y_ == nullptr) {
    auto* p = CreateMaybeMessage<::mz::proto::vec2>(GetArenaForAllocation());
    y_ = p;
  }
  return y_;
}
inline ::mz::proto::vec2* mat2::mutable_y() {
  ::mz::proto::vec2* _msg = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:mz.proto.mat2.y)
  return _msg;
}
inline void mat2::set_allocated_y(::mz::proto::vec2* y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete y_;
  }
  if (y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mz::proto::vec2>::GetOwningArena(y);
    if (message_arena != submessage_arena) {
      y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, y, submessage_arena);
    }
    
  } else {
    
  }
  y_ = y;
  // @@protoc_insertion_point(field_set_allocated:mz.proto.mat2.y)
}

// -------------------------------------------------------------------

// mat3

// .mz.proto.vec3 x = 1;
inline bool mat3::_internal_has_x() const {
  return this != internal_default_instance() && x_ != nullptr;
}
inline bool mat3::has_x() const {
  return _internal_has_x();
}
inline void mat3::clear_x() {
  if (GetArenaForAllocation() == nullptr && x_ != nullptr) {
    delete x_;
  }
  x_ = nullptr;
}
inline const ::mz::proto::vec3& mat3::_internal_x() const {
  const ::mz::proto::vec3* p = x_;
  return p != nullptr ? *p : reinterpret_cast<const ::mz::proto::vec3&>(
      ::mz::proto::_vec3_default_instance_);
}
inline const ::mz::proto::vec3& mat3::x() const {
  // @@protoc_insertion_point(field_get:mz.proto.mat3.x)
  return _internal_x();
}
inline void mat3::unsafe_arena_set_allocated_x(
    ::mz::proto::vec3* x) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(x_);
  }
  x_ = x;
  if (x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mz.proto.mat3.x)
}
inline ::mz::proto::vec3* mat3::release_x() {
  
  ::mz::proto::vec3* temp = x_;
  x_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mz::proto::vec3* mat3::unsafe_arena_release_x() {
  // @@protoc_insertion_point(field_release:mz.proto.mat3.x)
  
  ::mz::proto::vec3* temp = x_;
  x_ = nullptr;
  return temp;
}
inline ::mz::proto::vec3* mat3::_internal_mutable_x() {
  
  if (x_ == nullptr) {
    auto* p = CreateMaybeMessage<::mz::proto::vec3>(GetArenaForAllocation());
    x_ = p;
  }
  return x_;
}
inline ::mz::proto::vec3* mat3::mutable_x() {
  ::mz::proto::vec3* _msg = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:mz.proto.mat3.x)
  return _msg;
}
inline void mat3::set_allocated_x(::mz::proto::vec3* x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete x_;
  }
  if (x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mz::proto::vec3>::GetOwningArena(x);
    if (message_arena != submessage_arena) {
      x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x, submessage_arena);
    }
    
  } else {
    
  }
  x_ = x;
  // @@protoc_insertion_point(field_set_allocated:mz.proto.mat3.x)
}

// .mz.proto.vec3 y = 2;
inline bool mat3::_internal_has_y() const {
  return this != internal_default_instance() && y_ != nullptr;
}
inline bool mat3::has_y() const {
  return _internal_has_y();
}
inline void mat3::clear_y() {
  if (GetArenaForAllocation() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
}
inline const ::mz::proto::vec3& mat3::_internal_y() const {
  const ::mz::proto::vec3* p = y_;
  return p != nullptr ? *p : reinterpret_cast<const ::mz::proto::vec3&>(
      ::mz::proto::_vec3_default_instance_);
}
inline const ::mz::proto::vec3& mat3::y() const {
  // @@protoc_insertion_point(field_get:mz.proto.mat3.y)
  return _internal_y();
}
inline void mat3::unsafe_arena_set_allocated_y(
    ::mz::proto::vec3* y) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(y_);
  }
  y_ = y;
  if (y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mz.proto.mat3.y)
}
inline ::mz::proto::vec3* mat3::release_y() {
  
  ::mz::proto::vec3* temp = y_;
  y_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mz::proto::vec3* mat3::unsafe_arena_release_y() {
  // @@protoc_insertion_point(field_release:mz.proto.mat3.y)
  
  ::mz::proto::vec3* temp = y_;
  y_ = nullptr;
  return temp;
}
inline ::mz::proto::vec3* mat3::_internal_mutable_y() {
  
  if (y_ == nullptr) {
    auto* p = CreateMaybeMessage<::mz::proto::vec3>(GetArenaForAllocation());
    y_ = p;
  }
  return y_;
}
inline ::mz::proto::vec3* mat3::mutable_y() {
  ::mz::proto::vec3* _msg = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:mz.proto.mat3.y)
  return _msg;
}
inline void mat3::set_allocated_y(::mz::proto::vec3* y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete y_;
  }
  if (y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mz::proto::vec3>::GetOwningArena(y);
    if (message_arena != submessage_arena) {
      y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, y, submessage_arena);
    }
    
  } else {
    
  }
  y_ = y;
  // @@protoc_insertion_point(field_set_allocated:mz.proto.mat3.y)
}

// .mz.proto.vec3 z = 3;
inline bool mat3::_internal_has_z() const {
  return this != internal_default_instance() && z_ != nullptr;
}
inline bool mat3::has_z() const {
  return _internal_has_z();
}
inline void mat3::clear_z() {
  if (GetArenaForAllocation() == nullptr && z_ != nullptr) {
    delete z_;
  }
  z_ = nullptr;
}
inline const ::mz::proto::vec3& mat3::_internal_z() const {
  const ::mz::proto::vec3* p = z_;
  return p != nullptr ? *p : reinterpret_cast<const ::mz::proto::vec3&>(
      ::mz::proto::_vec3_default_instance_);
}
inline const ::mz::proto::vec3& mat3::z() const {
  // @@protoc_insertion_point(field_get:mz.proto.mat3.z)
  return _internal_z();
}
inline void mat3::unsafe_arena_set_allocated_z(
    ::mz::proto::vec3* z) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(z_);
  }
  z_ = z;
  if (z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mz.proto.mat3.z)
}
inline ::mz::proto::vec3* mat3::release_z() {
  
  ::mz::proto::vec3* temp = z_;
  z_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mz::proto::vec3* mat3::unsafe_arena_release_z() {
  // @@protoc_insertion_point(field_release:mz.proto.mat3.z)
  
  ::mz::proto::vec3* temp = z_;
  z_ = nullptr;
  return temp;
}
inline ::mz::proto::vec3* mat3::_internal_mutable_z() {
  
  if (z_ == nullptr) {
    auto* p = CreateMaybeMessage<::mz::proto::vec3>(GetArenaForAllocation());
    z_ = p;
  }
  return z_;
}
inline ::mz::proto::vec3* mat3::mutable_z() {
  ::mz::proto::vec3* _msg = _internal_mutable_z();
  // @@protoc_insertion_point(field_mutable:mz.proto.mat3.z)
  return _msg;
}
inline void mat3::set_allocated_z(::mz::proto::vec3* z) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete z_;
  }
  if (z) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mz::proto::vec3>::GetOwningArena(z);
    if (message_arena != submessage_arena) {
      z = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, z, submessage_arena);
    }
    
  } else {
    
  }
  z_ = z;
  // @@protoc_insertion_point(field_set_allocated:mz.proto.mat3.z)
}

// -------------------------------------------------------------------

// mat4

// .mz.proto.vec4 x = 1;
inline bool mat4::_internal_has_x() const {
  return this != internal_default_instance() && x_ != nullptr;
}
inline bool mat4::has_x() const {
  return _internal_has_x();
}
inline void mat4::clear_x() {
  if (GetArenaForAllocation() == nullptr && x_ != nullptr) {
    delete x_;
  }
  x_ = nullptr;
}
inline const ::mz::proto::vec4& mat4::_internal_x() const {
  const ::mz::proto::vec4* p = x_;
  return p != nullptr ? *p : reinterpret_cast<const ::mz::proto::vec4&>(
      ::mz::proto::_vec4_default_instance_);
}
inline const ::mz::proto::vec4& mat4::x() const {
  // @@protoc_insertion_point(field_get:mz.proto.mat4.x)
  return _internal_x();
}
inline void mat4::unsafe_arena_set_allocated_x(
    ::mz::proto::vec4* x) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(x_);
  }
  x_ = x;
  if (x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mz.proto.mat4.x)
}
inline ::mz::proto::vec4* mat4::release_x() {
  
  ::mz::proto::vec4* temp = x_;
  x_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mz::proto::vec4* mat4::unsafe_arena_release_x() {
  // @@protoc_insertion_point(field_release:mz.proto.mat4.x)
  
  ::mz::proto::vec4* temp = x_;
  x_ = nullptr;
  return temp;
}
inline ::mz::proto::vec4* mat4::_internal_mutable_x() {
  
  if (x_ == nullptr) {
    auto* p = CreateMaybeMessage<::mz::proto::vec4>(GetArenaForAllocation());
    x_ = p;
  }
  return x_;
}
inline ::mz::proto::vec4* mat4::mutable_x() {
  ::mz::proto::vec4* _msg = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:mz.proto.mat4.x)
  return _msg;
}
inline void mat4::set_allocated_x(::mz::proto::vec4* x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete x_;
  }
  if (x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mz::proto::vec4>::GetOwningArena(x);
    if (message_arena != submessage_arena) {
      x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x, submessage_arena);
    }
    
  } else {
    
  }
  x_ = x;
  // @@protoc_insertion_point(field_set_allocated:mz.proto.mat4.x)
}

// .mz.proto.vec4 y = 2;
inline bool mat4::_internal_has_y() const {
  return this != internal_default_instance() && y_ != nullptr;
}
inline bool mat4::has_y() const {
  return _internal_has_y();
}
inline void mat4::clear_y() {
  if (GetArenaForAllocation() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
}
inline const ::mz::proto::vec4& mat4::_internal_y() const {
  const ::mz::proto::vec4* p = y_;
  return p != nullptr ? *p : reinterpret_cast<const ::mz::proto::vec4&>(
      ::mz::proto::_vec4_default_instance_);
}
inline const ::mz::proto::vec4& mat4::y() const {
  // @@protoc_insertion_point(field_get:mz.proto.mat4.y)
  return _internal_y();
}
inline void mat4::unsafe_arena_set_allocated_y(
    ::mz::proto::vec4* y) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(y_);
  }
  y_ = y;
  if (y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mz.proto.mat4.y)
}
inline ::mz::proto::vec4* mat4::release_y() {
  
  ::mz::proto::vec4* temp = y_;
  y_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mz::proto::vec4* mat4::unsafe_arena_release_y() {
  // @@protoc_insertion_point(field_release:mz.proto.mat4.y)
  
  ::mz::proto::vec4* temp = y_;
  y_ = nullptr;
  return temp;
}
inline ::mz::proto::vec4* mat4::_internal_mutable_y() {
  
  if (y_ == nullptr) {
    auto* p = CreateMaybeMessage<::mz::proto::vec4>(GetArenaForAllocation());
    y_ = p;
  }
  return y_;
}
inline ::mz::proto::vec4* mat4::mutable_y() {
  ::mz::proto::vec4* _msg = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:mz.proto.mat4.y)
  return _msg;
}
inline void mat4::set_allocated_y(::mz::proto::vec4* y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete y_;
  }
  if (y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mz::proto::vec4>::GetOwningArena(y);
    if (message_arena != submessage_arena) {
      y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, y, submessage_arena);
    }
    
  } else {
    
  }
  y_ = y;
  // @@protoc_insertion_point(field_set_allocated:mz.proto.mat4.y)
}

// .mz.proto.vec4 z = 3;
inline bool mat4::_internal_has_z() const {
  return this != internal_default_instance() && z_ != nullptr;
}
inline bool mat4::has_z() const {
  return _internal_has_z();
}
inline void mat4::clear_z() {
  if (GetArenaForAllocation() == nullptr && z_ != nullptr) {
    delete z_;
  }
  z_ = nullptr;
}
inline const ::mz::proto::vec4& mat4::_internal_z() const {
  const ::mz::proto::vec4* p = z_;
  return p != nullptr ? *p : reinterpret_cast<const ::mz::proto::vec4&>(
      ::mz::proto::_vec4_default_instance_);
}
inline const ::mz::proto::vec4& mat4::z() const {
  // @@protoc_insertion_point(field_get:mz.proto.mat4.z)
  return _internal_z();
}
inline void mat4::unsafe_arena_set_allocated_z(
    ::mz::proto::vec4* z) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(z_);
  }
  z_ = z;
  if (z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mz.proto.mat4.z)
}
inline ::mz::proto::vec4* mat4::release_z() {
  
  ::mz::proto::vec4* temp = z_;
  z_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mz::proto::vec4* mat4::unsafe_arena_release_z() {
  // @@protoc_insertion_point(field_release:mz.proto.mat4.z)
  
  ::mz::proto::vec4* temp = z_;
  z_ = nullptr;
  return temp;
}
inline ::mz::proto::vec4* mat4::_internal_mutable_z() {
  
  if (z_ == nullptr) {
    auto* p = CreateMaybeMessage<::mz::proto::vec4>(GetArenaForAllocation());
    z_ = p;
  }
  return z_;
}
inline ::mz::proto::vec4* mat4::mutable_z() {
  ::mz::proto::vec4* _msg = _internal_mutable_z();
  // @@protoc_insertion_point(field_mutable:mz.proto.mat4.z)
  return _msg;
}
inline void mat4::set_allocated_z(::mz::proto::vec4* z) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete z_;
  }
  if (z) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mz::proto::vec4>::GetOwningArena(z);
    if (message_arena != submessage_arena) {
      z = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, z, submessage_arena);
    }
    
  } else {
    
  }
  z_ = z;
  // @@protoc_insertion_point(field_set_allocated:mz.proto.mat4.z)
}

// .mz.proto.vec4 w = 4;
inline bool mat4::_internal_has_w() const {
  return this != internal_default_instance() && w_ != nullptr;
}
inline bool mat4::has_w() const {
  return _internal_has_w();
}
inline void mat4::clear_w() {
  if (GetArenaForAllocation() == nullptr && w_ != nullptr) {
    delete w_;
  }
  w_ = nullptr;
}
inline const ::mz::proto::vec4& mat4::_internal_w() const {
  const ::mz::proto::vec4* p = w_;
  return p != nullptr ? *p : reinterpret_cast<const ::mz::proto::vec4&>(
      ::mz::proto::_vec4_default_instance_);
}
inline const ::mz::proto::vec4& mat4::w() const {
  // @@protoc_insertion_point(field_get:mz.proto.mat4.w)
  return _internal_w();
}
inline void mat4::unsafe_arena_set_allocated_w(
    ::mz::proto::vec4* w) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(w_);
  }
  w_ = w;
  if (w) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mz.proto.mat4.w)
}
inline ::mz::proto::vec4* mat4::release_w() {
  
  ::mz::proto::vec4* temp = w_;
  w_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mz::proto::vec4* mat4::unsafe_arena_release_w() {
  // @@protoc_insertion_point(field_release:mz.proto.mat4.w)
  
  ::mz::proto::vec4* temp = w_;
  w_ = nullptr;
  return temp;
}
inline ::mz::proto::vec4* mat4::_internal_mutable_w() {
  
  if (w_ == nullptr) {
    auto* p = CreateMaybeMessage<::mz::proto::vec4>(GetArenaForAllocation());
    w_ = p;
  }
  return w_;
}
inline ::mz::proto::vec4* mat4::mutable_w() {
  ::mz::proto::vec4* _msg = _internal_mutable_w();
  // @@protoc_insertion_point(field_mutable:mz.proto.mat4.w)
  return _msg;
}
inline void mat4::set_allocated_w(::mz::proto::vec4* w) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete w_;
  }
  if (w) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mz::proto::vec4>::GetOwningArena(w);
    if (message_arena != submessage_arena) {
      w = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, w, submessage_arena);
    }
    
  } else {
    
  }
  w_ = w;
  // @@protoc_insertion_point(field_set_allocated:mz.proto.mat4.w)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mz

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Builtins_2eproto
